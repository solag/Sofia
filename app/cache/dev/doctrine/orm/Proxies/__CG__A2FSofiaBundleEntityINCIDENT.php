<?php

namespace Proxies\__CG__\A2F\SofiaBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class INCIDENT extends \A2F\SofiaBundle\Entity\INCIDENT implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'id', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'logDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'acknowledgeDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'closeDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'spentCredit', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'description', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'identifiedIssue', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'solution', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'notes', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'database', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'server', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'dba', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'requester', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'statusT');
        }

        return array('__isInitialized__', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'id', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'logDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'acknowledgeDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'closeDate', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'spentCredit', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'description', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'identifiedIssue', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'solution', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'notes', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'database', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'server', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'dba', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'requester', '' . "\0" . 'A2F\\SofiaBundle\\Entity\\INCIDENT' . "\0" . 'statusT');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (INCIDENT $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogDate($logDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogDate', array($logDate));

        return parent::setLogDate($logDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogDate', array());

        return parent::getLogDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcknowledgeDate($acknowledgeDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcknowledgeDate', array($acknowledgeDate));

        return parent::setAcknowledgeDate($acknowledgeDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcknowledgeDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcknowledgeDate', array());

        return parent::getAcknowledgeDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCloseDate($closeDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCloseDate', array($closeDate));

        return parent::setCloseDate($closeDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCloseDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCloseDate', array());

        return parent::getCloseDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpentCredit($spentCredit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpentCredit', array($spentCredit));

        return parent::setSpentCredit($spentCredit);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpentCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpentCredit', array());

        return parent::getSpentCredit();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdentifiedIssue($identifiedIssue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdentifiedIssue', array($identifiedIssue));

        return parent::setIdentifiedIssue($identifiedIssue);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentifiedIssue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentifiedIssue', array());

        return parent::getIdentifiedIssue();
    }

    /**
     * {@inheritDoc}
     */
    public function setSolution($solution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSolution', array($solution));

        return parent::setSolution($solution);
    }

    /**
     * {@inheritDoc}
     */
    public function getSolution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSolution', array());

        return parent::getSolution();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', array($notes));

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', array());

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatabase(\A2F\SofiaBundle\Entity\DATABASE $database = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatabase', array($database));

        return parent::setDatabase($database);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatabase()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatabase', array());

        return parent::getDatabase();
    }

    /**
     * {@inheritDoc}
     */
    public function setServer(\A2F\SofiaBundle\Entity\SERVER $server = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServer', array($server));

        return parent::setServer($server);
    }

    /**
     * {@inheritDoc}
     */
    public function getServer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServer', array());

        return parent::getServer();
    }

    /**
     * {@inheritDoc}
     */
    public function setDba(\A2F\SofiaBundle\Entity\DBA $dba)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDba', array($dba));

        return parent::setDba($dba);
    }

    /**
     * {@inheritDoc}
     */
    public function getDba()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDba', array());

        return parent::getDba();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequester(\A2F\SofiaBundle\Entity\REQUESTER $requester)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequester', array($requester));

        return parent::setRequester($requester);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequester()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequester', array());

        return parent::getRequester();
    }

    /**
     * {@inheritDoc}
     */
    public function addStatusT(\A2F\SofiaBundle\Entity\INCIDENTSTATUSCHANGE $statusT)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStatusT', array($statusT));

        return parent::addStatusT($statusT);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStatusT(\A2F\SofiaBundle\Entity\INCIDENTSTATUSCHANGE $statusT)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStatusT', array($statusT));

        return parent::removeStatusT($statusT);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusT()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusT', array());

        return parent::getStatusT();
    }

}
